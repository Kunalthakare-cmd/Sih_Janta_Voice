{"ast":null,"code":"// // import React, { useState } from \"react\";\n// // import axios from \"axios\";\n\n// // export default function VoiceComplaint() {\n// //   const [logs, setLogs] = useState([]);\n// //   const [loading, setLoading] = useState(false);\n// //   const [complaintId, setComplaintId] = useState(null);\n// //   const [submitted, setSubmitted] = useState(false);\n\n// //   const appendLog = (line) => {\n// //     setLogs((prev) => [...prev, line]);\n// //   };\n\n// //   const handleVoiceComplaint = async () => {\n// //     setLoading(true);\n// //     setLogs([\"üéôÔ∏è Voice complaint started...\"]);\n// //     setSubmitted(false);\n// //     setComplaintId(null);\n\n// //     try {\n// //       // 1. Trigger the Python voice bot and get structured data\n// //       const voiceRes = await axios.get(\"http://localhost:5000/api/\");\n// //       if (voiceRes.data.status !== \"success\") {\n// //         appendLog(\"‚ùå Voice bot error: \" + voiceRes.data.message);\n// //         return;\n// //       }\n\n// //       const complaintData = voiceRes.data.data;\n// //       appendLog(\"‚úÖ Voice bot finished. Data:\");\n// //       appendLog(JSON.stringify(complaintData, null, 2));\n\n// //       // 2. Send that same data to the complaints endpoint\n// //       const formRes = await axios.post(\n// //         \"http://localhost:5000/api/complaint\",\n// //         {\n// //           name: complaintData[\"‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§‡§ï‡§∞‡•ç‡§§‡§æ ‡§ï‡§æ ‡§®‡§æ‡§Æ\"] || complaintData.name,\n// //           complaint: complaintData[\"‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§\"] || complaintData.complaint,\n// //           location: complaintData[\"‡§∏‡•ç‡§•‡§æ‡§®\"] || complaintData.location,\n// //           // map any other fields if needed\n// //         }\n// //       );\n\n// //       // 3. Capture and display the Complaint ID\n// //       const newId = formRes.data.complaintId || formRes.data.complaintId;\n// //       setComplaintId(newId);\n// //       setSubmitted(true);\n// //       appendLog(`üì¨ Complaint submitted. ID: ${newId}`);\n// //     } catch (err) {\n// //       appendLog(\"‚ùå Error: \" + err.message);\n// //     } finally {\n// //       setLoading(false);\n// //     }\n// //   };\n\n// //   return (\n// //     <div className=\"max-w-xl mx-auto mt-10 p-6 bg-white rounded shadow\">\n// //       <h2 className=\"text-2xl font-semibold mb-4\">Voice Complaint</h2>\n// //       <button\n// //         onClick={handleVoiceComplaint}\n// //         disabled={loading}\n// //         className=\"bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 disabled:opacity-50\"\n// //       >\n// //         {loading ? \"Processing...\" : \"Start Voice Complaint\"}\n// //       </button>\n\n// //       <div className=\"mt-6 bg-gray-900 text-green-200 p-4 rounded font-mono h-48 overflow-y-scroll\">\n// //         {logs.map((line, i) => (\n// //           <div key={i}>{line}</div>\n// //         ))}\n// //       </div>\n\n// //       {submitted && (\n// //         <div className=\"mt-6 text-green-700 font-semibold\">\n// //           Complaint submitted successfully!<br />\n// //           Your Complaint ID: <span className=\"font-bold\">{complaintId}</span>\n// //         </div>\n// //       )}\n// //     </div>\n// //   );\n// // }\n\n// import React, { useState, useEffect } from \"react\";\n// import { Phone, PhoneCall, Mic, MicOff, Volume2, VolumeX } from \"lucide-react\";\n\n// export default function VoiceComplaint() {\n//   const [callState, setCallState] = useState(\"idle\"); // idle, calling, connected, ended\n//   const [isListening, setIsListening] = useState(false);\n//   const [isSpeaking, setIsSpeaking] = useState(false);\n//   const [callDuration, setCallDuration] = useState(0);\n//   const [logs, setLogs] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [complaintId, setComplaintId] = useState(null);\n//   const [submitted, setSubmitted] = useState(false);\n//   const [currentStep, setCurrentStep] = useState(\"\");\n\n//   // Timer for call duration\n//   useEffect(() => {\n//     let interval;\n//     if (callState === \"connected\") {\n//       interval = setInterval(() => {\n//         setCallDuration(prev => prev + 1);\n//       }, 1000);\n//     }\n//     return () => clearInterval(interval);\n//   }, [callState]);\n\n//   const formatTime = (seconds) => {\n//     const mins = Math.floor(seconds / 60);\n//     const secs = seconds % 60;\n//     return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n//   };\n\n//   const appendLog = (line, type = \"info\") => {\n//     setLogs((prev) => [...prev, { message: line, type, time: new Date().toLocaleTimeString() }]);\n//   };\n\n//   const startCall = async () => {\n//     setCallState(\"calling\");\n//     setCallDuration(0);\n//     setLogs([]);\n//     setComplaintId(null);\n//     setSubmitted(false);\n//     setCurrentStep(\"Connecting to JantaVoice...\");\n\n//     // Simulate connecting\n//     setTimeout(() => {\n//       setCallState(\"connected\");\n//       setCurrentStep(\"Connected - Starting voice complaint process\");\n//       appendLog(\"üîó Connected to JantaVoice system\", \"success\");\n//       handleVoiceComplaint();\n//     }, 2000);\n//   };\n\n//   const endCall = () => {\n//     setCallState(\"ended\");\n//     setIsListening(false);\n//     setIsSpeaking(false);\n//     setCurrentStep(submitted ? \"Call completed successfully\" : \"Call ended\");\n//     setTimeout(() => {\n//       setCallState(\"idle\");\n//       setCurrentStep(\"\");\n//     }, 3000);\n//   };\n\n//   const handleVoiceComplaint = async () => {\n//     setLoading(true);\n//     setIsSpeaking(true);\n//     appendLog(\"üéôÔ∏è Voice complaint started...\", \"info\");\n//     setCurrentStep(\"Processing voice input...\");\n\n//     try {\n//       // 1. Trigger the Python voice bot and get structured data\n//       setCurrentStep(\"Connecting to voice bot...\");\n//       appendLog(\"üìû Connecting to voice bot system...\", \"info\");\n\n//       const voiceRes = await fetch(\"http://localhost:5000/api/voice-complaint\");\n//       const voiceData = await voiceRes.json();\n\n//       if (voiceData.status !== \"success\") {\n//         appendLog(\"‚ùå Voice bot error: \" + voiceData.message, \"error\");\n//         setCurrentStep(\"Voice bot connection failed\");\n//         setIsSpeaking(false);\n//         return;\n//       }\n\n//       const complaintData = voiceData.data;\n//       setIsSpeaking(false);\n//       setCurrentStep(\"Voice conversation completed\");\n//       appendLog(\"‚úÖ Voice bot finished. Data collected:\", \"success\");\n//       appendLog(JSON.stringify(complaintData, null, 2), \"data\");\n\n//       // Show conversation details in a user-friendly way\n//       if (complaintData[\"‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§\"]) {\n//         appendLog(`üìù Complaint: ${complaintData[\"‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§\"]}`, \"conversation\");\n//       }\n//       if (complaintData[\"‡§∏‡•ç‡§•‡§æ‡§®\"]) {\n//         appendLog(`üìç Location: ${complaintData[\"‡§∏‡•ç‡§•‡§æ‡§®\"]}`, \"conversation\");\n//       }\n//       if (complaintData[\"‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§‡§ï‡§∞‡•ç‡§§‡§æ ‡§ï‡§æ ‡§®‡§æ‡§Æ\"]) {\n//         appendLog(`üë§ Name: ${complaintData[\"‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§‡§ï‡§∞‡•ç‡§§‡§æ ‡§ï‡§æ ‡§®‡§æ‡§Æ\"]}`, \"conversation\");\n//       }\n//       if (complaintData[\"‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞\"]) {\n//         appendLog(`üì± Phone: ${complaintData[\"‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞\"]}`, \"conversation\");\n//       }\n//       if (complaintData[\"‡§µ‡§ø‡§≠‡§æ‡§ó\"]) {\n//         appendLog(`üè¢ Department: ${complaintData[\"‡§µ‡§ø‡§≠‡§æ‡§ó\"]}`, \"conversation\");\n//       }\n\n//       // 2. Send that same data to the complaints endpoint\n//       setCurrentStep(\"Submitting to admin dashboard...\");\n//       appendLog(\"üì§ Submitting complaint to admin dashboard...\", \"info\");\n\n//       const formRes = await fetch(\"http://localhost:5000/api/complaint\", {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify({\n//             name: complaintData[\"‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§‡§ï‡§∞‡•ç‡§§‡§æ ‡§ï‡§æ ‡§®‡§æ‡§Æ\"] || complaintData.name || \"Kunal Thakare\",\n//             description: complaintData[\"‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§\"] || complaintData.complaint || \"No description\",\n//             location: complaintData[\"‡§∏‡•ç‡§•‡§æ‡§®\"] || complaintData.location || \"Unknown\",\n//             urgency: \"normal\", // Add missing urgency field\n//             department: complaintData[\"‡§µ‡§ø‡§≠‡§æ‡§ó\"] || complaintData.department || \"General\",\n//         }),\n\n//       });\n\n//       const formData = await formRes.json();\n\n//       // 3. Capture and display the Complaint ID\n//       const newId = formData.complaintId || complaintData.complaint_id || \"CMP-\" + Date.now();\n//       setComplaintId(newId);\n//       setSubmitted(true);\n//       setCurrentStep(\"Complaint registered successfully!\");\n//       appendLog(`üì¨ Complaint submitted to admin dashboard!`, \"success\");\n//       appendLog(`üÜî Complaint ID: ${newId}`, \"success\");\n//       appendLog(\"‚úÖ Admin will review and take action soon\", \"success\");\n\n//     } catch (err) {\n//       appendLog(\"‚ùå Error: \" + err.message, \"error\");\n//       setCurrentStep(\"Error occurred during processing\");\n//     } finally {\n//       setLoading(false);\n//       setIsSpeaking(false);\n//       setIsListening(false);\n//     }\n//   };\n\n//   const getLogIcon = (type) => {\n//     switch (type) {\n//       case \"success\": return \"‚úÖ\";\n//       case \"error\": return \"‚ùå\";\n//       case \"conversation\": return \"üí¨\";\n//       case \"data\": return \"üìä\";\n//       default: return \"‚ÑπÔ∏è\";\n//     }\n//   };\n\n//   const getLogColor = (type) => {\n//     switch (type) {\n//       case \"success\": return \"text-green-400\";\n//       case \"error\": return \"text-red-400\";\n//       case \"conversation\": return \"text-blue-400\";\n//       case \"data\": return \"text-yellow-400\";\n//       default: return \"text-gray-300\";\n//     }\n//   };\n\n//   return (\n//     <div className=\"max-w-md mx-auto mt-10 bg-gradient-to-b from-gray-900 to-gray-800 rounded-3xl p-6 text-white shadow-2xl\">\n//       {/* Header */}\n//       <div className=\"text-center mb-8\">\n//         <h2 className=\"text-xl font-semibold mb-2\">‡§ú‡§®‡§§‡§æ ‡§µ‡•â‡§á‡§∏</h2>\n//         <div className=\"text-sm text-gray-300\">‡§Ü‡§µ‡§æ‡§ú‡§º ‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§™‡•ç‡§∞‡§£‡§æ‡§≤‡•Ä</div>\n//       </div>\n\n//       {/* Call Status */}\n//       <div className=\"text-center mb-8\">\n//         {callState === \"idle\" && (\n//           <div>\n//             <div className=\"w-24 h-24 mx-auto mb-4 bg-green-600 rounded-full flex items-center justify-center\">\n//               <Phone size={32} />\n//             </div>\n//             <div className=\"text-lg\">‡§ï‡•â‡§≤ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§§‡•à‡§Ø‡§æ‡§∞</div>\n//             <div className=\"text-sm text-gray-400\">‡§µ‡•â‡§á‡§∏ ‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ü‡•à‡§™ ‡§ï‡§∞‡•á‡§Ç</div>\n//           </div>\n//         )}\n\n//         {callState === \"calling\" && (\n//           <div>\n//             <div className=\"w-24 h-24 mx-auto mb-4 bg-yellow-600 rounded-full flex items-center justify-center animate-pulse\">\n//               <PhoneCall size={32} />\n//             </div>\n//             <div className=\"text-lg\">Connecting...</div>\n//             <div className=\"text-sm text-gray-400\">Please wait</div>\n//           </div>\n//         )}\n\n//         {callState === \"connected\" && (\n//           <div>\n//             <div className=\"w-24 h-24 mx-auto mb-4 bg-green-600 rounded-full flex items-center justify-center relative\">\n//               <PhoneCall size={32} />\n//               {(isListening || isSpeaking) && (\n//                 <div className=\"absolute -inset-2 border-4 border-green-400 rounded-full animate-ping\"></div>\n//               )}\n//             </div>\n//             <div className=\"text-lg\">Connected</div>\n//             <div className=\"text-sm text-gray-400\">Duration: {formatTime(callDuration)}</div>\n//             <div className=\"text-xs text-blue-400 mt-1\">{currentStep}</div>\n//           </div>\n//         )}\n\n//         {callState === \"ended\" && (\n//           <div>\n//             <div className=\"w-24 h-24 mx-auto mb-4 bg-red-600 rounded-full flex items-center justify-center\">\n//               <Phone size={32} />\n//             </div>\n//             <div className=\"text-lg\">Call Ended</div>\n//             <div className=\"text-sm text-gray-400\">\n//               {complaintId ? `Complaint ID: ${complaintId}` : \"Call completed\"}\n//             </div>\n//           </div>\n//         )}\n//       </div>\n\n//       {/* Status Indicators */}\n//       {callState === \"connected\" && (\n//         <div className=\"flex justify-center space-x-8 mb-6\">\n//           <div className={`flex items-center space-x-2 ${isSpeaking ? 'text-blue-400' : 'text-gray-500'}`}>\n//             {isSpeaking ? <Volume2 size={20} /> : <VolumeX size={20} />}\n//             <span className=\"text-sm\">Bot</span>\n//           </div>\n//           <div className={`flex items-center space-x-2 ${isListening ? 'text-green-400' : 'text-gray-500'}`}>\n//             {isListening ? <Mic size={20} /> : <MicOff size={20} />}\n//             <span className=\"text-sm\">You</span>\n//           </div>\n//         </div>\n//       )}\n\n//       {/* Call Controls */}\n//       <div className=\"flex justify-center space-x-4 mb-6\">\n//         {callState === \"idle\" && (\n//           <button\n//             onClick={startCall}\n//             disabled={loading}\n//             className=\"w-16 h-16 bg-green-600 hover:bg-green-700 disabled:opacity-50 rounded-full flex items-center justify-center transition-colors\"\n//           >\n//             <Phone size={24} />\n//           </button>\n//         )}\n\n//         {(callState === \"connected\" || callState === \"calling\") && (\n//           <button\n//             onClick={endCall}\n//             className=\"w-16 h-16 bg-red-600 hover:bg-red-700 rounded-full flex items-center justify-center transition-colors\"\n//           >\n//             <Phone size={24} className=\"transform rotate-45\" />\n//           </button>\n//         )}\n//       </div>\n\n//       {/* Real-time Logs */}\n//       {logs.length > 0 && (\n//         <div className=\"bg-gray-800 rounded-lg p-4 max-h-64 overflow-y-auto mb-4\">\n//           <div className=\"text-sm text-gray-400 mb-2\">Live Process Log:</div>\n//           {logs.map((log, index) => (\n//             <div key={index} className=\"mb-2 text-sm\">\n//               <div className={`${getLogColor(log.type)} break-words`}>\n//                 <span className=\"mr-2\">{getLogIcon(log.type)}</span>\n//                 {log.message}\n//                 <div className=\"text-xs opacity-50 ml-6\">{log.time}</div>\n//               </div>\n//             </div>\n//           ))}\n//         </div>\n//       )}\n\n//       {/* Success Message */}\n//       {submitted && (\n//         <div className=\"p-4 bg-green-900 border border-green-600 rounded-lg text-center\">\n//           <div className=\"text-green-400 font-semibold\">‚úÖ Complaint Registered!</div>\n//           <div className=\"text-sm text-green-300 mt-1\">ID: {complaintId}</div>\n//           <div className=\"text-xs text-green-200 mt-2\">\n//             Your complaint has been sent to the admin dashboard\n//           </div>\n//         </div>\n//       )}\n\n//       {/* Loading Indicator */}\n//       {loading && (\n//         <div className=\"text-center text-blue-400\">\n//           <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-blue-400 mx-auto mb-2\"></div>\n//           <div className=\"text-sm\">Processing...</div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }","map":{"version":3,"names":[],"sources":["D:/Kunal Files/projects/janta_voice_new1/Janta_Voice_Final/frontend/src/pages/VoiceComplaint.jsx"],"sourcesContent":["// // import React, { useState } from \"react\";\r\n// // import axios from \"axios\";\r\n\r\n// // export default function VoiceComplaint() {\r\n// //   const [logs, setLogs] = useState([]);\r\n// //   const [loading, setLoading] = useState(false);\r\n// //   const [complaintId, setComplaintId] = useState(null);\r\n// //   const [submitted, setSubmitted] = useState(false);\r\n\r\n// //   const appendLog = (line) => {\r\n// //     setLogs((prev) => [...prev, line]);\r\n// //   };\r\n\r\n// //   const handleVoiceComplaint = async () => {\r\n// //     setLoading(true);\r\n// //     setLogs([\"üéôÔ∏è Voice complaint started...\"]);\r\n// //     setSubmitted(false);\r\n// //     setComplaintId(null);\r\n\r\n// //     try {\r\n// //       // 1. Trigger the Python voice bot and get structured data\r\n// //       const voiceRes = await axios.get(\"http://localhost:5000/api/\");\r\n// //       if (voiceRes.data.status !== \"success\") {\r\n// //         appendLog(\"‚ùå Voice bot error: \" + voiceRes.data.message);\r\n// //         return;\r\n// //       }\r\n\r\n// //       const complaintData = voiceRes.data.data;\r\n// //       appendLog(\"‚úÖ Voice bot finished. Data:\");\r\n// //       appendLog(JSON.stringify(complaintData, null, 2));\r\n\r\n// //       // 2. Send that same data to the complaints endpoint\r\n// //       const formRes = await axios.post(\r\n// //         \"http://localhost:5000/api/complaint\",\r\n// //         {\r\n// //           name: complaintData[\"‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§‡§ï‡§∞‡•ç‡§§‡§æ ‡§ï‡§æ ‡§®‡§æ‡§Æ\"] || complaintData.name,\r\n// //           complaint: complaintData[\"‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§\"] || complaintData.complaint,\r\n// //           location: complaintData[\"‡§∏‡•ç‡§•‡§æ‡§®\"] || complaintData.location,\r\n// //           // map any other fields if needed\r\n// //         }\r\n// //       );\r\n\r\n// //       // 3. Capture and display the Complaint ID\r\n// //       const newId = formRes.data.complaintId || formRes.data.complaintId;\r\n// //       setComplaintId(newId);\r\n// //       setSubmitted(true);\r\n// //       appendLog(`üì¨ Complaint submitted. ID: ${newId}`);\r\n// //     } catch (err) {\r\n// //       appendLog(\"‚ùå Error: \" + err.message);\r\n// //     } finally {\r\n// //       setLoading(false);\r\n// //     }\r\n// //   };\r\n\r\n// //   return (\r\n// //     <div className=\"max-w-xl mx-auto mt-10 p-6 bg-white rounded shadow\">\r\n// //       <h2 className=\"text-2xl font-semibold mb-4\">Voice Complaint</h2>\r\n// //       <button\r\n// //         onClick={handleVoiceComplaint}\r\n// //         disabled={loading}\r\n// //         className=\"bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 disabled:opacity-50\"\r\n// //       >\r\n// //         {loading ? \"Processing...\" : \"Start Voice Complaint\"}\r\n// //       </button>\r\n\r\n// //       <div className=\"mt-6 bg-gray-900 text-green-200 p-4 rounded font-mono h-48 overflow-y-scroll\">\r\n// //         {logs.map((line, i) => (\r\n// //           <div key={i}>{line}</div>\r\n// //         ))}\r\n// //       </div>\r\n\r\n// //       {submitted && (\r\n// //         <div className=\"mt-6 text-green-700 font-semibold\">\r\n// //           Complaint submitted successfully!<br />\r\n// //           Your Complaint ID: <span className=\"font-bold\">{complaintId}</span>\r\n// //         </div>\r\n// //       )}\r\n// //     </div>\r\n// //   );\r\n// // }\r\n\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { Phone, PhoneCall, Mic, MicOff, Volume2, VolumeX } from \"lucide-react\";\r\n\r\n// export default function VoiceComplaint() {\r\n//   const [callState, setCallState] = useState(\"idle\"); // idle, calling, connected, ended\r\n//   const [isListening, setIsListening] = useState(false);\r\n//   const [isSpeaking, setIsSpeaking] = useState(false);\r\n//   const [callDuration, setCallDuration] = useState(0);\r\n//   const [logs, setLogs] = useState([]);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [complaintId, setComplaintId] = useState(null);\r\n//   const [submitted, setSubmitted] = useState(false);\r\n//   const [currentStep, setCurrentStep] = useState(\"\");\r\n\r\n//   // Timer for call duration\r\n//   useEffect(() => {\r\n//     let interval;\r\n//     if (callState === \"connected\") {\r\n//       interval = setInterval(() => {\r\n//         setCallDuration(prev => prev + 1);\r\n//       }, 1000);\r\n//     }\r\n//     return () => clearInterval(interval);\r\n//   }, [callState]);\r\n\r\n//   const formatTime = (seconds) => {\r\n//     const mins = Math.floor(seconds / 60);\r\n//     const secs = seconds % 60;\r\n//     return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\r\n//   };\r\n\r\n//   const appendLog = (line, type = \"info\") => {\r\n//     setLogs((prev) => [...prev, { message: line, type, time: new Date().toLocaleTimeString() }]);\r\n//   };\r\n\r\n//   const startCall = async () => {\r\n//     setCallState(\"calling\");\r\n//     setCallDuration(0);\r\n//     setLogs([]);\r\n//     setComplaintId(null);\r\n//     setSubmitted(false);\r\n//     setCurrentStep(\"Connecting to JantaVoice...\");\r\n    \r\n//     // Simulate connecting\r\n//     setTimeout(() => {\r\n//       setCallState(\"connected\");\r\n//       setCurrentStep(\"Connected - Starting voice complaint process\");\r\n//       appendLog(\"üîó Connected to JantaVoice system\", \"success\");\r\n//       handleVoiceComplaint();\r\n//     }, 2000);\r\n//   };\r\n\r\n//   const endCall = () => {\r\n//     setCallState(\"ended\");\r\n//     setIsListening(false);\r\n//     setIsSpeaking(false);\r\n//     setCurrentStep(submitted ? \"Call completed successfully\" : \"Call ended\");\r\n//     setTimeout(() => {\r\n//       setCallState(\"idle\");\r\n//       setCurrentStep(\"\");\r\n//     }, 3000);\r\n//   };\r\n\r\n//   const handleVoiceComplaint = async () => {\r\n//     setLoading(true);\r\n//     setIsSpeaking(true);\r\n//     appendLog(\"üéôÔ∏è Voice complaint started...\", \"info\");\r\n//     setCurrentStep(\"Processing voice input...\");\r\n\r\n//     try {\r\n//       // 1. Trigger the Python voice bot and get structured data\r\n//       setCurrentStep(\"Connecting to voice bot...\");\r\n//       appendLog(\"üìû Connecting to voice bot system...\", \"info\");\r\n      \r\n//       const voiceRes = await fetch(\"http://localhost:5000/api/voice-complaint\");\r\n//       const voiceData = await voiceRes.json();\r\n      \r\n//       if (voiceData.status !== \"success\") {\r\n//         appendLog(\"‚ùå Voice bot error: \" + voiceData.message, \"error\");\r\n//         setCurrentStep(\"Voice bot connection failed\");\r\n//         setIsSpeaking(false);\r\n//         return;\r\n//       }\r\n\r\n//       const complaintData = voiceData.data;\r\n//       setIsSpeaking(false);\r\n//       setCurrentStep(\"Voice conversation completed\");\r\n//       appendLog(\"‚úÖ Voice bot finished. Data collected:\", \"success\");\r\n//       appendLog(JSON.stringify(complaintData, null, 2), \"data\");\r\n\r\n//       // Show conversation details in a user-friendly way\r\n//       if (complaintData[\"‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§\"]) {\r\n//         appendLog(`üìù Complaint: ${complaintData[\"‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§\"]}`, \"conversation\");\r\n//       }\r\n//       if (complaintData[\"‡§∏‡•ç‡§•‡§æ‡§®\"]) {\r\n//         appendLog(`üìç Location: ${complaintData[\"‡§∏‡•ç‡§•‡§æ‡§®\"]}`, \"conversation\");\r\n//       }\r\n//       if (complaintData[\"‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§‡§ï‡§∞‡•ç‡§§‡§æ ‡§ï‡§æ ‡§®‡§æ‡§Æ\"]) {\r\n//         appendLog(`üë§ Name: ${complaintData[\"‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§‡§ï‡§∞‡•ç‡§§‡§æ ‡§ï‡§æ ‡§®‡§æ‡§Æ\"]}`, \"conversation\");\r\n//       }\r\n//       if (complaintData[\"‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞\"]) {\r\n//         appendLog(`üì± Phone: ${complaintData[\"‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞\"]}`, \"conversation\");\r\n//       }\r\n//       if (complaintData[\"‡§µ‡§ø‡§≠‡§æ‡§ó\"]) {\r\n//         appendLog(`üè¢ Department: ${complaintData[\"‡§µ‡§ø‡§≠‡§æ‡§ó\"]}`, \"conversation\");\r\n//       }\r\n\r\n//       // 2. Send that same data to the complaints endpoint\r\n//       setCurrentStep(\"Submitting to admin dashboard...\");\r\n//       appendLog(\"üì§ Submitting complaint to admin dashboard...\", \"info\");\r\n      \r\n//       const formRes = await fetch(\"http://localhost:5000/api/complaint\", {\r\n//         method: \"POST\",\r\n//         headers: {\r\n//           \"Content-Type\": \"application/json\",\r\n//         },\r\n//         body: JSON.stringify({\r\n//             name: complaintData[\"‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§‡§ï‡§∞‡•ç‡§§‡§æ ‡§ï‡§æ ‡§®‡§æ‡§Æ\"] || complaintData.name || \"Kunal Thakare\",\r\n//             description: complaintData[\"‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§\"] || complaintData.complaint || \"No description\",\r\n//             location: complaintData[\"‡§∏‡•ç‡§•‡§æ‡§®\"] || complaintData.location || \"Unknown\",\r\n//             urgency: \"normal\", // Add missing urgency field\r\n//             department: complaintData[\"‡§µ‡§ø‡§≠‡§æ‡§ó\"] || complaintData.department || \"General\",\r\n//         }),\r\n\r\n//       });\r\n\r\n//       const formData = await formRes.json();\r\n\r\n//       // 3. Capture and display the Complaint ID\r\n//       const newId = formData.complaintId || complaintData.complaint_id || \"CMP-\" + Date.now();\r\n//       setComplaintId(newId);\r\n//       setSubmitted(true);\r\n//       setCurrentStep(\"Complaint registered successfully!\");\r\n//       appendLog(`üì¨ Complaint submitted to admin dashboard!`, \"success\");\r\n//       appendLog(`üÜî Complaint ID: ${newId}`, \"success\");\r\n//       appendLog(\"‚úÖ Admin will review and take action soon\", \"success\");\r\n\r\n//     } catch (err) {\r\n//       appendLog(\"‚ùå Error: \" + err.message, \"error\");\r\n//       setCurrentStep(\"Error occurred during processing\");\r\n//     } finally {\r\n//       setLoading(false);\r\n//       setIsSpeaking(false);\r\n//       setIsListening(false);\r\n//     }\r\n//   };\r\n\r\n//   const getLogIcon = (type) => {\r\n//     switch (type) {\r\n//       case \"success\": return \"‚úÖ\";\r\n//       case \"error\": return \"‚ùå\";\r\n//       case \"conversation\": return \"üí¨\";\r\n//       case \"data\": return \"üìä\";\r\n//       default: return \"‚ÑπÔ∏è\";\r\n//     }\r\n//   };\r\n\r\n//   const getLogColor = (type) => {\r\n//     switch (type) {\r\n//       case \"success\": return \"text-green-400\";\r\n//       case \"error\": return \"text-red-400\";\r\n//       case \"conversation\": return \"text-blue-400\";\r\n//       case \"data\": return \"text-yellow-400\";\r\n//       default: return \"text-gray-300\";\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"max-w-md mx-auto mt-10 bg-gradient-to-b from-gray-900 to-gray-800 rounded-3xl p-6 text-white shadow-2xl\">\r\n//       {/* Header */}\r\n//       <div className=\"text-center mb-8\">\r\n//         <h2 className=\"text-xl font-semibold mb-2\">‡§ú‡§®‡§§‡§æ ‡§µ‡•â‡§á‡§∏</h2>\r\n//         <div className=\"text-sm text-gray-300\">‡§Ü‡§µ‡§æ‡§ú‡§º ‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§™‡•ç‡§∞‡§£‡§æ‡§≤‡•Ä</div>\r\n//       </div>\r\n\r\n//       {/* Call Status */}\r\n//       <div className=\"text-center mb-8\">\r\n//         {callState === \"idle\" && (\r\n//           <div>\r\n//             <div className=\"w-24 h-24 mx-auto mb-4 bg-green-600 rounded-full flex items-center justify-center\">\r\n//               <Phone size={32} />\r\n//             </div>\r\n//             <div className=\"text-lg\">‡§ï‡•â‡§≤ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§§‡•à‡§Ø‡§æ‡§∞</div>\r\n//             <div className=\"text-sm text-gray-400\">‡§µ‡•â‡§á‡§∏ ‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ü‡•à‡§™ ‡§ï‡§∞‡•á‡§Ç</div>\r\n//           </div>\r\n//         )}\r\n\r\n//         {callState === \"calling\" && (\r\n//           <div>\r\n//             <div className=\"w-24 h-24 mx-auto mb-4 bg-yellow-600 rounded-full flex items-center justify-center animate-pulse\">\r\n//               <PhoneCall size={32} />\r\n//             </div>\r\n//             <div className=\"text-lg\">Connecting...</div>\r\n//             <div className=\"text-sm text-gray-400\">Please wait</div>\r\n//           </div>\r\n//         )}\r\n\r\n//         {callState === \"connected\" && (\r\n//           <div>\r\n//             <div className=\"w-24 h-24 mx-auto mb-4 bg-green-600 rounded-full flex items-center justify-center relative\">\r\n//               <PhoneCall size={32} />\r\n//               {(isListening || isSpeaking) && (\r\n//                 <div className=\"absolute -inset-2 border-4 border-green-400 rounded-full animate-ping\"></div>\r\n//               )}\r\n//             </div>\r\n//             <div className=\"text-lg\">Connected</div>\r\n//             <div className=\"text-sm text-gray-400\">Duration: {formatTime(callDuration)}</div>\r\n//             <div className=\"text-xs text-blue-400 mt-1\">{currentStep}</div>\r\n//           </div>\r\n//         )}\r\n\r\n//         {callState === \"ended\" && (\r\n//           <div>\r\n//             <div className=\"w-24 h-24 mx-auto mb-4 bg-red-600 rounded-full flex items-center justify-center\">\r\n//               <Phone size={32} />\r\n//             </div>\r\n//             <div className=\"text-lg\">Call Ended</div>\r\n//             <div className=\"text-sm text-gray-400\">\r\n//               {complaintId ? `Complaint ID: ${complaintId}` : \"Call completed\"}\r\n//             </div>\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n\r\n//       {/* Status Indicators */}\r\n//       {callState === \"connected\" && (\r\n//         <div className=\"flex justify-center space-x-8 mb-6\">\r\n//           <div className={`flex items-center space-x-2 ${isSpeaking ? 'text-blue-400' : 'text-gray-500'}`}>\r\n//             {isSpeaking ? <Volume2 size={20} /> : <VolumeX size={20} />}\r\n//             <span className=\"text-sm\">Bot</span>\r\n//           </div>\r\n//           <div className={`flex items-center space-x-2 ${isListening ? 'text-green-400' : 'text-gray-500'}`}>\r\n//             {isListening ? <Mic size={20} /> : <MicOff size={20} />}\r\n//             <span className=\"text-sm\">You</span>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {/* Call Controls */}\r\n//       <div className=\"flex justify-center space-x-4 mb-6\">\r\n//         {callState === \"idle\" && (\r\n//           <button\r\n//             onClick={startCall}\r\n//             disabled={loading}\r\n//             className=\"w-16 h-16 bg-green-600 hover:bg-green-700 disabled:opacity-50 rounded-full flex items-center justify-center transition-colors\"\r\n//           >\r\n//             <Phone size={24} />\r\n//           </button>\r\n//         )}\r\n\r\n//         {(callState === \"connected\" || callState === \"calling\") && (\r\n//           <button\r\n//             onClick={endCall}\r\n//             className=\"w-16 h-16 bg-red-600 hover:bg-red-700 rounded-full flex items-center justify-center transition-colors\"\r\n//           >\r\n//             <Phone size={24} className=\"transform rotate-45\" />\r\n//           </button>\r\n//         )}\r\n//       </div>\r\n\r\n//       {/* Real-time Logs */}\r\n//       {logs.length > 0 && (\r\n//         <div className=\"bg-gray-800 rounded-lg p-4 max-h-64 overflow-y-auto mb-4\">\r\n//           <div className=\"text-sm text-gray-400 mb-2\">Live Process Log:</div>\r\n//           {logs.map((log, index) => (\r\n//             <div key={index} className=\"mb-2 text-sm\">\r\n//               <div className={`${getLogColor(log.type)} break-words`}>\r\n//                 <span className=\"mr-2\">{getLogIcon(log.type)}</span>\r\n//                 {log.message}\r\n//                 <div className=\"text-xs opacity-50 ml-6\">{log.time}</div>\r\n//               </div>\r\n//             </div>\r\n//           ))}\r\n//         </div>\r\n//       )}\r\n\r\n//       {/* Success Message */}\r\n//       {submitted && (\r\n//         <div className=\"p-4 bg-green-900 border border-green-600 rounded-lg text-center\">\r\n//           <div className=\"text-green-400 font-semibold\">‚úÖ Complaint Registered!</div>\r\n//           <div className=\"text-sm text-green-300 mt-1\">ID: {complaintId}</div>\r\n//           <div className=\"text-xs text-green-200 mt-2\">\r\n//             Your complaint has been sent to the admin dashboard\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {/* Loading Indicator */}\r\n//       {loading && (\r\n//         <div className=\"text-center text-blue-400\">\r\n//           <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-blue-400 mx-auto mb-2\"></div>\r\n//           <div className=\"text-sm\">Processing...</div>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n\r\n\r\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}