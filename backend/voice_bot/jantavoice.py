# # import os
# # import sys

# # # Ensure parent directory is in path
# # sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

# # from voice_bot.voice_bot_hindi import speak_hindi, listen_hindi
# # from voice_bot.gemini_ai import ask_gemini_followup_or_result, is_structured_json
# # import json
# # import requests
# # from utils.telegram_utils import send_telegram_message


# # def send_to_backend(json_data):
# #     url = "http://localhost:5000/api/complaint"   # ‚Üê singular
# #     try:
# #         res = requests.post(url, json=json_data)
# #         print("‚úÖ Backend response:", res.json())
# #     except Exception as e:
# #         print("‚ùå Failed to send to backend:", e)



# # def start_conversation():
# #     # Simplified flow with fixed follow-up questions for reliability
# #     conversation = []
# #     # First prompt
# #     speak_hindi("‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§ú‡§®‡§§‡§æ‡§µ‡•â‡§á‡§∏ ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§¨‡§§‡§æ‡§è‡§Ç‡•§")
    
# #     # 1. Collect issue description
# #     while True:
# #         issue = listen_hindi()
# #         if issue:
# #             conversation.append(f"‡§Ø‡•Ç‡§ú‡§º‡§∞: {issue}")
# #             break
# #         speak_hindi("‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§¨‡§§‡§æ‡§è‡§Ç‡•§")

# #     # 2. Collect location
# #     speak_hindi("‡§ï‡•É‡§™‡§Ø‡§æ ‡§â‡§∏ ‡§∏‡•ç‡§•‡§æ‡§® ‡§ï‡§æ ‡§®‡§æ‡§Æ ‡§¨‡§§‡§æ‡§è‡§Ç ‡§ú‡§π‡§æ‡§Å ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•à‡•§")
# #     while True:
# #         location = listen_hindi()
# #         if location:
# #             conversation.append(f"‡§Ø‡•Ç‡§ú‡§º‡§∞: {location}")
# #             break
# #         speak_hindi("‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡•ç‡§•‡§æ‡§® ‡§¨‡§§‡§æ‡§è‡§Ç‡•§")

# #     # 3. Collect user name
# #     speak_hindi("‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§®‡§æ‡§Æ ‡§¨‡§§‡§æ‡§è‡§Ç‡•§")
# #     while True:
# #         name = listen_hindi()
# #         if name:
# #             conversation.append(f"‡§Ø‡•Ç‡§ú‡§º‡§∞: {name}")
# #             break
# #         speak_hindi("‡§ï‡•É‡§™‡§Ø‡§æ ‡§®‡§æ‡§Æ ‡§¨‡§§‡§æ‡§è‡§Ç‡•§")

# #     # 4. Collect mobile number (spoken digits)
# #     speak_hindi("‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§¶‡§∏ ‡§Ö‡§Ç‡§ï‡•ã‡§Ç ‡§ï‡§æ ‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞ ‡§¨‡§§‡§æ‡§è‡§Ç‡•§")
# #     while True:
# #         mobile = listen_hindi()
# #         if mobile and len(mobile.replace(" ", "")) >= 10:
# #             mobile = ''.join(filter(str.isdigit, mobile))
# #             conversation.append(f"‡§Ø‡•Ç‡§ú‡§º‡§∞: {mobile}")
# #             break
# #         speak_hindi("‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§π‡•Ä ‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞ ‡§¨‡§§‡§æ‡§è‡§Ç‡•§")

# #     # Build structured JSON
# #     result = {
# #         "‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§": issue,
# #         "‡§∏‡•ç‡§•‡§æ‡§®": location,
# #         "‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§‡§ï‡§∞‡•ç‡§§‡§æ ‡§ï‡§æ ‡§®‡§æ‡§Æ": name,
# #         "‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞": mobile,
# #         "‡§¨‡•ã‡§≤‡§®‡•á_‡§≤‡§æ‡§Ø‡§ï_‡§∏‡§æ‡§∞‡§æ‡§Ç‡§∂": f"‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ {location} ‡§∏‡•á ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§π‡•à‡•§",
# #         "‡§Ö‡§Ç‡§§‡§ø‡§Æ_‡§ò‡•ã‡§∑‡§£‡§æ": "‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§¶‡§∞‡•ç‡§ú ‡§π‡•ã ‡§ö‡•Å‡§ï‡•Ä ‡§π‡•à ‡§î‡§∞ ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§µ‡§ø‡§≠‡§æ‡§ó ‡§ï‡•ã ‡§≠‡•á‡§ú ‡§¶‡•Ä ‡§ó‡§à ‡§π‡•à‡•§ ‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶!"
# #     }

# #     # Speak summary and announcement
# #     speak_hindi(result["‡§¨‡•ã‡§≤‡§®‡•á_‡§≤‡§æ‡§Ø‡§ï_‡§∏‡§æ‡§∞‡§æ‡§Ç‡§∂"])
# #     speak_hindi(result["‡§Ö‡§Ç‡§§‡§ø‡§Æ_‡§ò‡•ã‡§∑‡§£‡§æ"])

# #     # Print and save
# #     print("‡§Ö‡§Ç‡§§‡§ø‡§Æ ‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§:")
# #     print(json.dumps(result, indent=2, ensure_ascii=False))
# #     with open("complaints.json", "a", encoding="utf-8") as file:
# #         file.write(json.dumps(result, ensure_ascii=False) + "\n")

# #     # Send to backend and Telegram
# #     send_to_backend(result)
# #     send_telegram_message(result, result.get("complaint_id", "CMP-UNKNOWN"))

# #     # Return for API
# #     return {"output": "\n".join(conversation), **result}


# # if __name__ == "__main__":
# #     start_conversation()

# # import os
# # import sys
# # import json
# # import requests

# # # Add parent path for imports
# # sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

# # from voice_bot.voice_bot_hindi import speak_hindi, listen_hindi
# # from voice_bot.gemini_ai import ask_gemini_followup_or_result, is_structured_json
# # from utils.telegram_utils import send_telegram_message


# # def send_to_backend(json_data):
# #     url = "http://localhost:5000/api/complaint"
# #     try:
# #         res = requests.post(url, json=json_data)
# #         print("‚úÖ Backend response:", res.json())
# #     except Exception as e:
# #         print("‚ùå Backend error:", e)


# # def start_conversation():
# #     conversation_log = ""
# #     print("üîÅ ‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡§®‡•á ‡§ï‡•Ä ‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§∂‡•Å‡§∞‡•Ç...\n")

# #     # First prompt
# #     speak_hindi("‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§ú‡§®‡§§‡§æ‡§µ‡•â‡§á‡§∏ ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à‡•§")
    
# #     while True:
# #         # AI decides the next question or outputs final JSON
# #         ai_response = ask_gemini_followup_or_result(conversation_log)
# #         print("ü§ñ Gemini said:", ai_response)

# #         # If it's final structured output
# #         final_json = is_structured_json(ai_response)
# #         if final_json:
# #             break

# #         # Otherwise ask follow-up question
# #         speak_hindi(ai_response)
# #         user_input = listen_hindi()
# #         if not user_input:
# #             speak_hindi("‡§ï‡•É‡§™‡§Ø‡§æ ‡§¶‡•ã‡§¨‡§æ‡§∞‡§æ ‡§¨‡•ã‡§≤‡•á‡§Ç‡•§")
# #             continue

# #         conversation_log += f"\n‡§Ø‡•Ç‡§ú‡§º‡§∞: {user_input}"

# #     # ‚úÖ Speak the summary and final thank-you
# #     if final_json.get("‡§¨‡•ã‡§≤‡§®‡•á_‡§≤‡§æ‡§Ø‡§ï_‡§∏‡§æ‡§∞‡§æ‡§Ç‡§∂"):
# #         speak_hindi(final_json["‡§¨‡•ã‡§≤‡§®‡•á_‡§≤‡§æ‡§Ø‡§ï_‡§∏‡§æ‡§∞‡§æ‡§Ç‡§∂"])
# #     if final_json.get("‡§Ö‡§Ç‡§§‡§ø‡§Æ_‡§ò‡•ã‡§∑‡§£‡§æ"):
# #         speak_hindi(final_json["‡§Ö‡§Ç‡§§‡§ø‡§Æ_‡§ò‡•ã‡§∑‡§£‡§æ"])

# #     # Print and save
# #     print("‚úÖ ‡§Ö‡§Ç‡§§‡§ø‡§Æ ‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§:")
# #     print(json.dumps(final_json, indent=2, ensure_ascii=False))
# #     with open("complaints.json", "a", encoding="utf-8") as f:
# #         f.write(json.dumps(final_json, ensure_ascii=False) + "\n")

# #     # Send to backend and Telegram
# #     send_to_backend(final_json)
# #     send_telegram_message(final_json, final_json.get("complaint_id", "CMP-UNKNOWN"))

# #     return final_json


# # if __name__ == "__main__":
# #     start_conversation()


# import os
# import sys
# import json
# import requests
# import time

# # Add parent path for imports
# sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

# from voice_bot.voice_bot_hindi import speak_hindi, listen_hindi
# from voice_bot.gemini_ai import ask_gemini_followup_or_result, is_structured_json, generate_complaint_id
# from utils.telegram_utils import send_telegram_message


# def send_to_backend(json_data):
#     """Send complaint data to backend API"""
#     url = "http://localhost:5000/api/complaint"
#     try:
#         # Map fields for backend compatibility
#         backend_data = {
#             "name": json_data.get("‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§‡§ï‡§∞‡•ç‡§§‡§æ ‡§ï‡§æ ‡§®‡§æ‡§Æ", ""),
#             "complaint": json_data.get("‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§", ""),
#             "description": json_data.get("‡§µ‡§ø‡§µ‡§∞‡§£", json_data.get("‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§", "")),  # Use description or fallback to complaint
#             "location": json_data.get("‡§∏‡•ç‡§•‡§æ‡§®", ""),
#             "phone": json_data.get("‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞", ""),
#             "department": json_data.get("‡§µ‡§ø‡§≠‡§æ‡§ó", ""),
#             "priority": json_data.get("priority", "medium"),
#             "complaint_id": json_data.get("complaint_id", "")
#         }
        
#         res = requests.post(url, json=backend_data)
#         print("‚úÖ Backend response:", res.json())
#         return True
#     except Exception as e:
#         print("‚ùå Backend error:", e)
#         return False


# def start_conversation():
#     """Start the human-like conversation flow"""
#     complaint_data = {
#         "‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§": "",
#         "‡§µ‡§ø‡§µ‡§∞‡§£": "",  # Added description field
#         "‡§∏‡•ç‡§•‡§æ‡§®": "",
#         "‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§‡§ï‡§∞‡•ç‡§§‡§æ ‡§ï‡§æ ‡§®‡§æ‡§Æ": "",
#         "‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞": "",
#         "‡§µ‡§ø‡§≠‡§æ‡§ó": "",
#         "priority": "medium"
#     }
    
#     conversation_step = 0
#     max_retries = 2
    
#     print("üîÅ ‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡§®‡•á ‡§ï‡•Ä ‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§∂‡•Å‡§∞‡•Ç...\n")
    
#     # Human-like introduction
#     greetings = [
#     "‡§®‡§Æ‡§∏‡•ç‡§ï‡§æ‡§∞! ‡§ú‡§®‡§§‡§æ‡§µ‡•â‡§á‡§∏ ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§π‡§æ‡§∞‡•ç‡§¶‡§ø‡§ï ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à‡•§ ",
#     "‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à ‡§Ü‡§™‡§ï‡§æ! ‡§ú‡§®‡§§‡§æ‡§µ‡•â‡§á‡§∏ ‡§Æ‡•á‡§Ç‡•§ ",
#     "‡§®‡§Æ‡§∏‡•ç‡§ï‡§æ‡§∞! ‡§ú‡§®‡§§‡§æ‡§µ‡•â‡§á‡§∏ ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§π‡§æ‡§∞‡•ç‡§¶‡§ø‡§ï ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à‡•§ ‡§Ü‡§á‡§è"
# ]
    
#     import random
#     speak_hindi(random.choice(greetings))
#     time.sleep(1)
    
#     # Conversation flow with predefined steps (including description)
#     conversation_steps = [
#     {
#         "question": "‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡•Ä ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§Ø‡§æ ‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§¨‡§§‡§æ‡§è‡§Ç‡•§",
#         "field": "‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§",
#         "followup": [
#             "‡§Ø‡§π ‡§µ‡§æ‡§ï‡§à ‡§è‡§ï ‡§ó‡§Ç‡§≠‡•Ä‡§∞ ‡§µ‡§ø‡§∑‡§Ø ‡§≤‡§ó ‡§∞‡§π‡§æ ‡§π‡•à‡•§",
#             "‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§¨‡§æ‡§§ ‡§∏‡§Æ‡§ù ‡§∞‡§π‡•Ä ‡§π‡•Ç‡§Å‡•§",
#             "‡§†‡•Ä‡§ï ‡§π‡•à, ‡§á‡§∏‡•á ‡§Æ‡•à‡§Ç ‡§®‡•ã‡§ü ‡§ï‡§∞ ‡§∞‡§π‡•Ä ‡§π‡•Ç‡§Å‡•§"
#         ]
#     },
#     {
#         "question": "‡§ï‡•É‡§™‡§Ø‡§æ ‡§á‡§∏ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§∏‡•ç‡§§‡§æ‡§∞ ‡§∏‡•á ‡§¨‡§§‡§æ‡§è‡§Ç ‚Äî ‡§ú‡•à‡§∏‡•á ‡§ï‡§¨ ‡§∏‡•á ‡§Ø‡§π ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à ‡§î‡§∞ ‡§ï‡§ø‡§∏ ‡§§‡§∞‡§π ‡§ï‡•Ä ‡§™‡§∞‡•á‡§∂‡§æ‡§®‡•Ä ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à?",
#         "field": "‡§µ‡§ø‡§µ‡§∞‡§£",
#         "followup": [
#             "‡§ú‡•Ä ‡§π‡§æ‡§Å, ‡§Ø‡§π ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§¨‡§π‡•Å‡§§ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§π‡•à‡•§",
#             "‡§Ü‡§™‡§ï‡•Ä ‡§¨‡§æ‡§§ ‡§∏‡§Æ‡§ù ‡§Æ‡•á‡§Ç ‡§Ü ‡§ó‡§à‡•§",
#             "‡§ß‡•ç‡§Ø‡§æ‡§®‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§®‡•ã‡§ü ‡§ï‡§∞ ‡§∞‡§π‡•Ä ‡§π‡•Ç‡§Å‡•§"
#         ]
#     },
#     # {
#     #     "question": "‡§Ø‡§π ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§ï‡§π‡§æ‡§Å ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à? ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•Ç‡§∞‡§æ ‡§∏‡•ç‡§•‡§æ‡§® ‡§Ø‡§æ ‡§™‡§§‡§æ ‡§¨‡§§‡§æ‡§è‡§Ç‡•§",
#     #     "field": "‡§∏‡•ç‡§•‡§æ‡§®",
#     #     "followup": [
#     #         "‡§∏‡§Æ‡§ù ‡§ó‡§à‡•§",
#     #         "‡§†‡•Ä‡§ï ‡§π‡•à, ‡§∏‡•ç‡§•‡§æ‡§® ‡§®‡•ã‡§ü ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§",
#     #         "‡§Ü‡§™‡§ï‡§æ ‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶‡•§"
#     #     ]
#     # },
#     # {
#     #     "question": "‡§Ü‡§™‡§ï‡§æ ‡§®‡§æ‡§Æ ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¨‡§§‡§æ‡§è‡§Ç?",
#     #     "field": "‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§‡§ï‡§∞‡•ç‡§§‡§æ ‡§ï‡§æ ‡§®‡§æ‡§Æ",
#     #     "followup": [
#     #         "‡§¨‡§π‡•Å‡§§ ‡§Ö‡§ö‡•ç‡§õ‡§æ, ‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶‡•§",
#     #         "‡§†‡•Ä‡§ï ‡§π‡•à, ‡§®‡§æ‡§Æ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞ ‡§≤‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§",
#     #         "‡§ú‡•Ä, ‡§®‡•ã‡§ü ‡§ï‡§∞ ‡§≤‡§ø‡§Ø‡§æ ‡§π‡•à‡•§"
#     #     ]
#     # },
#     # {
#     #     "question": "‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞ ‡§¨‡§§‡§æ‡§è‡§Ç ‡§§‡§æ‡§ï‡§ø ‡§π‡§Æ ‡§Ü‡§™‡§∏‡•á ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞ ‡§∏‡§ï‡•á‡§Ç‡•§",
#     #     "field": "‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞",
#     #     "followup": [
#     #         "‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶, ‡§®‡§Ç‡§¨‡§∞ ‡§®‡•ã‡§ü ‡§ï‡§∞ ‡§≤‡§ø‡§Ø‡§æ ‡§π‡•à‡•§",
#     #         "‡§†‡•Ä‡§ï ‡§π‡•à, ‡§Ü‡§™‡§ï‡§æ ‡§®‡§Ç‡§¨‡§∞ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§π‡•à‡•§",
#     #         "‡§¨‡§π‡•Å‡§§ ‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶‡•§"
#     #     ]
#     # }
# ]
    
#     # Step-by-step conversation
#     for step in conversation_steps:
#         retry_count = 0
        
#         while retry_count <= max_retries:
#             # Ask question
#             speak_hindi(step["question"])
#             user_input = listen_hindi()
            
#             if not user_input:
#                 retry_count += 1
#                 if retry_count <= max_retries:
#                     speak_hindi("‡§ï‡•É‡§™‡§Ø‡§æ ‡§¶‡•ã‡§¨‡§æ‡§∞‡§æ ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§¨‡•ã‡§≤‡•á‡§Ç‡•§")
#                 continue
                
#             # Store the response
#             complaint_data[step["field"]] = user_input
            
#             # Human-like acknowledgment
#             speak_hindi(random.choice(step["followup"]))
#             time.sleep(0.5)
#             break
        
#         if retry_count > max_retries:
#             speak_hindi("‡§ñ‡•á‡§¶ ‡§π‡•à, ‡§§‡§ï‡§®‡•Ä‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§")
#             return None
    
#     # Determine department using simple logic (saves API calls)
#     complaint_text = complaint_data["‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§"].lower()
#     description_text = complaint_data["‡§µ‡§ø‡§µ‡§∞‡§£"].lower()
#     combined_text = complaint_text + " " + description_text
    
#     if any(word in combined_text for word in ["‡§∏‡§°‡§º‡§ï", "‡§ó‡§°‡•ç‡§¢‡§æ", "road", "street", "pothole"]):
#         complaint_data["‡§µ‡§ø‡§≠‡§æ‡§ó"] = "‡§∏‡§°‡§º‡§ï ‡§µ‡§ø‡§≠‡§æ‡§ó"
#     elif any(word in combined_text for word in ["‡§™‡§æ‡§®‡•Ä", "‡§®‡§≤", "water", "tap", "pipe"]):
#         complaint_data["‡§µ‡§ø‡§≠‡§æ‡§ó"] = "‡§ú‡§≤ ‡§µ‡§ø‡§≠‡§æ‡§ó"
#     elif any(word in combined_text for word in ["‡§¨‡§ø‡§ú‡§≤‡•Ä", "light", "electricity", "power"]):
#         complaint_data["‡§µ‡§ø‡§≠‡§æ‡§ó"] = "‡§µ‡§ø‡§¶‡•ç‡§Ø‡•Å‡§§ ‡§µ‡§ø‡§≠‡§æ‡§ó"
#     elif any(word in combined_text for word in ["‡§ï‡•Ç‡§°‡§º‡§æ", "‡§ó‡§Ç‡§¶‡§ó‡•Ä", "garbage", "waste", "cleaning"]):
#         complaint_data["‡§µ‡§ø‡§≠‡§æ‡§ó"] = "‡§∏‡•ç‡§µ‡§ö‡•ç‡§õ‡§§‡§æ ‡§µ‡§ø‡§≠‡§æ‡§ó"
#     elif any(word in combined_text for word in ["‡§Ö‡§∏‡•ç‡§™‡§§‡§æ‡§≤", "doctor", "health", "medical"]):
#         complaint_data["‡§µ‡§ø‡§≠‡§æ‡§ó"] = "‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§µ‡§ø‡§≠‡§æ‡§ó"
#     else:
#         complaint_data["‡§µ‡§ø‡§≠‡§æ‡§ó"] = "‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§™‡•ç‡§∞‡§∂‡§æ‡§∏‡§®"
    
#     # Generate complaint ID
#     complaint_data["complaint_id"] = generate_complaint_id()
    
#     # Create summary with description
#     summary = f"""‡§Ü‡§™‡§ï‡•Ä ‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§¶‡§∞‡•ç‡§ú ‡§π‡•ã ‡§ó‡§à ‡§π‡•à‡•§ """
    
#     final_message = """‡§Ü‡§™‡§ï‡•Ä ‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§¶‡§∞‡•ç‡§ú ‡§π‡•ã ‡§ó‡§à ‡§π‡•à‡•§ 
#     ‡§ú‡§≤‡•ç‡§¶ ‡§π‡•Ä {complaint_data['‡§µ‡§ø‡§≠‡§æ‡§ó']} ‡§∏‡•á ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§è‡§ó‡§æ‡•§ 
#     ‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶!"""
    
#     complaint_data["‡§¨‡•ã‡§≤‡§®‡•á_‡§≤‡§æ‡§Ø‡§ï_‡§∏‡§æ‡§∞‡§æ‡§Ç‡§∂"] = summary
#     complaint_data["‡§Ö‡§Ç‡§§‡§ø‡§Æ_‡§ò‡•ã‡§∑‡§£‡§æ"] = final_message
    
#     # Speak summary and final message
#     speak_hindi(summary)
#     time.sleep(1)
#     speak_hindi(final_message)
    
#     # Print and save with description
#     print("‚úÖ ‡§Ö‡§Ç‡§§‡§ø‡§Æ ‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§:")
#     print(json.dumps(complaint_data, indent=2, ensure_ascii=False))
    
#     try:
#         with open("complaints.json", "a", encoding="utf-8") as f:
#             f.write(json.dumps(complaint_data, ensure_ascii=False) + "\n")
#     except Exception as e:
#         print(f"File save error: {e}")
    
#     # Send to backend and Telegram
#     send_to_backend(complaint_data)
#     send_telegram_message(complaint_data, complaint_data.get("complaint_id", "CMP-UNKNOWN"))
    
#     return complaint_data


# if __name__ == "__main__":
#     start_conversation()


import os
import sys
import json
import requests
import time

# Add parent path for imports
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from voice_bot.voice_bot_hindi import speak_hindi, listen_hindi
from voice_bot.gemini_ai import ask_gemini_followup_or_result, is_structured_json, generate_complaint_id
from utils.telegram_utils import send_telegram_message


def get_dynamic_questions(complaint_text):
    """Generate context-aware follow-up questions based on the complaint"""
    complaint_lower = complaint_text.lower()
    
    # Define question sets for different complaint categories
    question_sets = {
        "road": [
            "‡§Ø‡§π ‡§∏‡§°‡§º‡§ï ‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§ï‡§ø‡§§‡§®‡•á ‡§¶‡§ø‡§®‡•ã‡§Ç ‡§∏‡•á ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à?",
            "‡§ï‡•ç‡§Ø‡§æ ‡§Ø‡§π ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§∏‡§°‡§º‡§ï ‡§π‡•à ‡§Ø‡§æ ‡§ó‡§≤‡•Ä ‡§Æ‡•á‡§Ç ‡§π‡•à?",
            "‡§ï‡•ç‡§Ø‡§æ ‡§á‡§∏‡§∏‡•á ‡§Ø‡§æ‡§§‡§æ‡§Ø‡§æ‡§§ ‡§Æ‡•á‡§Ç ‡§∞‡•Å‡§ï‡§æ‡§µ‡§ü ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à?",
            "‡§¶‡§ø‡§® ‡§ï‡•á ‡§ï‡§ø‡§∏ ‡§∏‡§Æ‡§Ø ‡§Ø‡§π ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§∏‡§¨‡§∏‡•á ‡§ú‡•ç‡§Ø‡§æ‡§¶‡§æ ‡§™‡§∞‡•á‡§∂‡§æ‡§® ‡§ï‡§∞‡§§‡•Ä ‡§π‡•à?"
        ],
        
        "water": [
            "‡§™‡§æ‡§®‡•Ä ‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§ï‡§ø‡§§‡§®‡•á ‡§¶‡§ø‡§®‡•ã‡§Ç ‡§∏‡•á ‡§π‡•à?",
            "‡§ï‡•ç‡§Ø‡§æ ‡§™‡•Ç‡§∞‡•á ‡§¶‡§ø‡§® ‡§™‡§æ‡§®‡•Ä ‡§®‡§π‡•Ä‡§Ç ‡§Ü‡§§‡§æ ‡§Ø‡§æ ‡§ï‡•Å‡§õ ‡§∏‡§Æ‡§Ø ‡§ï‡•á ‡§≤‡§ø‡§è?",
            "‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§∏‡§™‡§æ‡§∏ ‡§ï‡•á ‡§ò‡§∞‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§≠‡•Ä ‡§Ø‡§π‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•à?",
            "‡§™‡§æ‡§®‡•Ä ‡§Ü‡§®‡•á ‡§ï‡§æ ‡§ï‡•ã‡§à ‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§∏‡§Æ‡§Ø ‡§π‡•à ‡§ï‡•ç‡§Ø‡§æ?"
        ],
        
        "electricity": [
            "‡§¨‡§ø‡§ú‡§≤‡•Ä ‡§ï‡•Ä ‡§Ø‡§π ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§ï‡§¨ ‡§∏‡•á ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à?",
            "‡§ï‡•ç‡§Ø‡§æ ‡§™‡•Ç‡§∞‡•á ‡§á‡§≤‡§æ‡§ï‡•á ‡§Æ‡•á‡§Ç ‡§¨‡§ø‡§ú‡§≤‡•Ä ‡§ú‡§æ‡§§‡•Ä ‡§π‡•à ‡§Ø‡§æ ‡§∏‡§ø‡§∞‡•ç‡§´ ‡§Ü‡§™‡§ï‡•á ‡§ò‡§∞ ‡§Æ‡•á‡§Ç?",
            "‡§¶‡§ø‡§® ‡§Æ‡•á‡§Ç ‡§ï‡§ø‡§§‡§®‡•Ä ‡§¨‡§æ‡§∞ ‡§î‡§∞ ‡§ï‡§ø‡§§‡§®‡•Ä ‡§¶‡•á‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§¨‡§ø‡§ú‡§≤‡•Ä ‡§ú‡§æ‡§§‡•Ä ‡§π‡•à?",
            "‡§ï‡•ç‡§Ø‡§æ ‡§∞‡§æ‡§§ ‡§ï‡•á ‡§∏‡§Æ‡§Ø ‡§≠‡•Ä ‡§Ø‡§π‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•ã‡§§‡•Ä ‡§π‡•à?"
        ],
        
        "garbage": [
            "‡§ï‡•Ç‡§°‡§º‡§æ ‡§ï‡§ø‡§§‡§®‡•á ‡§¶‡§ø‡§®‡•ã‡§Ç ‡§∏‡•á ‡§®‡§π‡•Ä‡§Ç ‡§â‡§†‡§æ‡§Ø‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ?",
            "‡§ï‡•ç‡§Ø‡§æ ‡§ï‡•Ç‡§°‡§º‡§æ ‡§ó‡§æ‡§°‡§º‡•Ä ‡§¨‡§ø‡§≤‡•ç‡§ï‡•Å‡§≤ ‡§®‡§π‡•Ä‡§Ç ‡§Ü‡§§‡•Ä ‡§Ø‡§æ ‡§Ö‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§Ü‡§§‡•Ä ‡§π‡•à?",
            "‡§ï‡•ç‡§Ø‡§æ ‡§á‡§∏‡§∏‡•á ‡§¨‡§¶‡§¨‡•Ç ‡§Ø‡§æ ‡§Ö‡§®‡•ç‡§Ø ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à?",
            "‡§Ü‡§∏‡§™‡§æ‡§∏ ‡§ï‡•á ‡§≤‡•ã‡§ó ‡§≠‡•Ä ‡§á‡§∏ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§∏‡•á ‡§™‡§∞‡•á‡§∂‡§æ‡§® ‡§π‡•à‡§Ç ‡§ï‡•ç‡§Ø‡§æ?"
        ],
        
        "health": [
            "‡§Ø‡§π ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§ï‡§¨ ‡§∏‡•á ‡§π‡•à?",
            "‡§ï‡•ç‡§Ø‡§æ ‡§Ø‡§π ‡§Ö‡§∏‡•ç‡§™‡§§‡§æ‡§≤, ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§Ø‡§æ ‡§¶‡§µ‡§æ ‡§∏‡•á ‡§ú‡•Å‡§°‡§º‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•à?",
            "‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™‡§®‡•á ‡§™‡§π‡§≤‡•á ‡§≠‡•Ä ‡§á‡§∏‡§ï‡•Ä ‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§ï‡•Ä ‡§•‡•Ä?",
            "‡§á‡§∏ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§∏‡•á ‡§ï‡§ø‡§§‡§®‡•á ‡§≤‡•ã‡§ó ‡§™‡•ç‡§∞‡§≠‡§æ‡§µ‡§ø‡§§ ‡§π‡•à‡§Ç?"
        ],
        
        "general": [
            "‡§Ø‡§π ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§ï‡§ø‡§§‡§®‡•á ‡§∏‡§Æ‡§Ø ‡§∏‡•á ‡§ö‡§≤ ‡§∞‡§π‡•Ä ‡§π‡•à?",
            "‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™‡§®‡•á ‡§™‡§π‡§≤‡•á ‡§≠‡•Ä ‡§á‡§∏‡§ï‡•Ä ‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§ï‡•Ä ‡§π‡•à?",
            "‡§á‡§∏‡§∏‡•á ‡§Ü‡§™‡§ï‡•ã ‡§Ø‡§æ ‡§Ü‡§∏‡§™‡§æ‡§∏ ‡§ï‡•á ‡§≤‡•ã‡§ó‡•ã‡§Ç ‡§ï‡•ã ‡§ï‡•ç‡§Ø‡§æ ‡§™‡§∞‡•á‡§∂‡§æ‡§®‡•Ä ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à?",
            "‡§Ü‡§™‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§á‡§∏‡§ï‡§æ ‡§ï‡•ç‡§Ø‡§æ ‡§∏‡§Æ‡§æ‡§ß‡§æ‡§® ‡§π‡•ã ‡§∏‡§ï‡§§‡§æ ‡§π‡•à?"
        ]
    }
    
    # Determine category and return relevant questions
    if any(word in complaint_lower for word in ["‡§∏‡§°‡§º‡§ï", "‡§ó‡§°‡•ç‡§¢‡§æ", "road", "street", "pothole"]):
        return question_sets["road"][:2]  # Ask 2 most relevant questions
    elif any(word in complaint_lower for word in ["‡§™‡§æ‡§®‡•Ä", "‡§®‡§≤", "water", "tap", "pipe"]):
        return question_sets["water"][:2]
    elif any(word in complaint_lower for word in ["‡§¨‡§ø‡§ú‡§≤‡•Ä", "light", "electricity", "power"]):
        return question_sets["electricity"][:2]
    elif any(word in complaint_lower for word in ["‡§ï‡•Ç‡§°‡§º‡§æ", "‡§ó‡§Ç‡§¶‡§ó‡•Ä", "garbage", "waste", "cleaning"]):
        return question_sets["garbage"][:2]
    elif any(word in complaint_lower for word in ["‡§Ö‡§∏‡•ç‡§™‡§§‡§æ‡§≤", "doctor", "health", "medical"]):
        return question_sets["health"][:2]
    else:
        return question_sets["general"][:2]


def send_to_backend(json_data):
    """Send complaint data to backend API"""
    url = "http://localhost:5000/api/complaint"
    try:
        # Map fields for backend compatibility
        backend_data = {
            "name": json_data.get("‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§‡§ï‡§∞‡•ç‡§§‡§æ ‡§ï‡§æ ‡§®‡§æ‡§Æ", ""),
            "complaint": json_data.get("‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§", ""),
            "description": json_data.get("‡§µ‡§ø‡§µ‡§∞‡§£", json_data.get("‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§", "")),  # Use description or fallback to complaint
            "location": json_data.get("‡§∏‡•ç‡§•‡§æ‡§®", ""),
            "phone": json_data.get("‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞", ""),
            "department": json_data.get("‡§µ‡§ø‡§≠‡§æ‡§ó", ""),
            "priority": json_data.get("priority", "medium"),
            "complaint_id": json_data.get("complaint_id", "")
        }
        
        res = requests.post(url, json=backend_data)
        print("‚úÖ Backend response:", res.json())
        return True
    except Exception as e:
        print("‚ùå Backend error:", e)
        return False


def start_conversation():
    """Start the human-like conversation flow"""
    complaint_data = {
        "‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§": "",
        "‡§µ‡§ø‡§µ‡§∞‡§£": "",  # Added description field
        "‡§∏‡•ç‡§•‡§æ‡§®": "",
        "‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§‡§ï‡§∞‡•ç‡§§‡§æ ‡§ï‡§æ ‡§®‡§æ‡§Æ": "",
        "‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞": "",
        "‡§µ‡§ø‡§≠‡§æ‡§ó": "",
        "priority": "medium"
    }
    
    max_retries = 2
    
    print("üîÅ ‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡§®‡•á ‡§ï‡•Ä ‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§∂‡•Å‡§∞‡•Ç...\n")
    
    # Human-like introduction
    greetings = [
        "‡§ú‡§®‡§§‡§æ‡§µ‡•â‡§á‡§∏ ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§π‡§æ‡§∞‡•ç‡§¶‡§ø‡§ï ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à‡•§ ",
    ]
    
    import random
    speak_hindi(random.choice(greetings))
    time.sleep(1)
    
    # Step 1: Get initial complaint
    retry_count = 0
    while retry_count <= max_retries:
        speak_hindi("‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡•Ä ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§Ø‡§æ ‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§¨‡§§‡§æ‡§è‡§Ç‡•§")
        user_input = listen_hindi()
        
        if not user_input:
            retry_count += 1
            if retry_count <= max_retries:
                speak_hindi("‡§ï‡•É‡§™‡§Ø‡§æ ‡§¶‡•ã‡§¨‡§æ‡§∞‡§æ ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§¨‡•ã‡§≤‡•á‡§Ç‡•§")
            continue
            
        complaint_data["‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§"] = user_input
        
        # Acknowledge the complaint
        acknowledgments = [
            "‡§†‡•Ä‡§ï ‡§π‡•à, ‡§á‡§∏‡•á ‡§Æ‡•à‡§Ç ‡§®‡•ã‡§ü ‡§ï‡§∞ ‡§∞‡§π‡•Ä ‡§π‡•Ç‡§Å‡•§"
        ]
        speak_hindi(random.choice(acknowledgments))
        time.sleep(0.5)
        break
    
    if retry_count > max_retries:
        speak_hindi("‡§ñ‡•á‡§¶ ‡§π‡•à, ‡§§‡§ï‡§®‡•Ä‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§")
        return None
    
    # Step 2: Get dynamic follow-up questions based on complaint
    follow_up_questions = get_dynamic_questions(complaint_data["‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§"])
    additional_details = []
    
    for question in follow_up_questions:
        retry_count = 0
        
        while retry_count <= max_retries:
            speak_hindi(question)
            user_input = listen_hindi()
            
            if not user_input:
                retry_count += 1
                if retry_count <= max_retries:
                    speak_hindi("‡§ï‡•É‡§™‡§Ø‡§æ ‡§¶‡•ã‡§¨‡§æ‡§∞‡§æ ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§¨‡•ã‡§≤‡•á‡§Ç‡•§")
                continue
                
            additional_details.append(f"‡§™‡•ç‡§∞‡§∂‡•ç‡§®: {question}\n‡§â‡§§‡•ç‡§§‡§∞: {user_input}")
            
            # Acknowledge the response
            # responses = [
            #     "‡§ú‡•Ä ‡§π‡§æ‡§Å, ‡§Ø‡§π ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§¨‡§π‡•Å‡§§ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§π‡•à‡•§",
            #     "‡§Ü‡§™‡§ï‡•Ä ‡§¨‡§æ‡§§ ‡§∏‡§Æ‡§ù ‡§Æ‡•á‡§Ç ‡§Ü ‡§ó‡§à‡•§",
            #     "‡§ß‡•ç‡§Ø‡§æ‡§®‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§®‡•ã‡§ü ‡§ï‡§∞ ‡§∞‡§π‡•Ä ‡§π‡•Ç‡§Å‡•§",
            #     "‡§†‡•Ä‡§ï ‡§π‡•à, ‡§∏‡§Æ‡§ù ‡§ó‡§Ø‡§æ‡•§"
            # ]
            # speak_hindi(random.choice(responses))
            # time.sleep(0.5)
            break
        
        if retry_count > max_retries:
            speak_hindi("‡§ñ‡•á‡§¶ ‡§π‡•à, ‡§§‡§ï‡§®‡•Ä‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§")
            return None
    
    # Combine complaint and additional details for description
    complaint_data["‡§µ‡§ø‡§µ‡§∞‡§£"] = complaint_data["‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§"]
    if additional_details:
        complaint_data["‡§µ‡§ø‡§µ‡§∞‡§£"] += "\n\n‡§Ö‡§§‡§ø‡§∞‡§ø‡§ï‡•ç‡§§ ‡§µ‡§ø‡§µ‡§∞‡§£:\n" + "\n\n".join(additional_details)
    
    # Determine department using simple logic (saves API calls)
    complaint_text = complaint_data["‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§"].lower()
    description_text = complaint_data["‡§µ‡§ø‡§µ‡§∞‡§£"].lower()
    combined_text = complaint_text + " " + description_text
    
    if any(word in combined_text for word in ["‡§∏‡§°‡§º‡§ï", "‡§ó‡§°‡•ç‡§¢‡§æ", "‡§∞‡•ã‡§°", "‡§∏‡•ç‡§ü‡•ç‡§∞‡•Ä‡§ü", "‡§™‡•â‡§•‡•ã‡§≤"]):
        complaint_data["‡§µ‡§ø‡§≠‡§æ‡§ó"] = "‡§∏‡§°‡§º‡§ï ‡§µ‡§ø‡§≠‡§æ‡§ó"
    elif any(word in combined_text for word in ["‡§™‡§æ‡§®‡•Ä", "‡§®‡§≤", "‡§µ‡•â‡§ü‡§∞", "‡§ü‡•à‡§™", "‡§™‡§æ‡§á‡§™"]):
        complaint_data["‡§µ‡§ø‡§≠‡§æ‡§ó"] = "‡§ú‡§≤ ‡§µ‡§ø‡§≠‡§æ‡§ó"
    elif any(word in combined_text for word in ["‡§¨‡§ø‡§ú‡§≤‡•Ä", "‡§≤‡§æ‡§á‡§ü", "‡§á‡§≤‡•á‡§ï‡•ç‡§ü‡•ç‡§∞‡§ø‡§∏‡§ø‡§ü‡•Ä", "‡§™‡§æ‡§µ‡§∞"]):
        complaint_data["‡§µ‡§ø‡§≠‡§æ‡§ó"] = "‡§µ‡§ø‡§¶‡•ç‡§Ø‡•Å‡§§ ‡§µ‡§ø‡§≠‡§æ‡§ó"
    elif any(word in combined_text for word in ["‡§ï‡•Ç‡§°‡§º‡§æ", "‡§ó‡§Ç‡§¶‡§ó‡•Ä", "‡§ó‡§æ‡§∞‡•ç‡§¨‡•á‡§ú", "‡§µ‡•á‡§∏‡•ç‡§ü", "‡§ï‡•ç‡§≤‡•Ä‡§®‡§ø‡§Ç‡§ó"]):
        complaint_data["‡§µ‡§ø‡§≠‡§æ‡§ó"] = "‡§∏‡•ç‡§µ‡§ö‡•ç‡§õ‡§§‡§æ ‡§µ‡§ø‡§≠‡§æ‡§ó"
    elif any(word in combined_text for word in ["‡§Ö‡§∏‡•ç‡§™‡§§‡§æ‡§≤", "‡§°‡•â‡§ï‡•ç‡§ü‡§∞", "‡§π‡•á‡§≤‡•ç‡§•", "‡§Æ‡•á‡§°‡§ø‡§ï‡§≤"]):
        complaint_data["‡§µ‡§ø‡§≠‡§æ‡§ó"] = "‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§µ‡§ø‡§≠‡§æ‡§ó"
    else:
        complaint_data["‡§µ‡§ø‡§≠‡§æ‡§ó"] = "‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§™‡•ç‡§∞‡§∂‡§æ‡§∏‡§®"
    
    # Generate complaint ID
    complaint_data["complaint_id"] = generate_complaint_id()
    
    # Create summary with description
    summary = f"""‡§Ü‡§™‡§ï‡•Ä ‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§¶‡§∞‡•ç‡§ú ‡§π‡•ã ‡§ó‡§à ‡§π‡•à‡•§ """
    
    final_message = f"""‡§Ü‡§™‡§ï‡•Ä ‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§¶‡§∞‡•ç‡§ú ‡§π‡•ã ‡§ó‡§à ‡§π‡•à‡•§ 
    ‡§ú‡§≤‡•ç‡§¶ ‡§π‡•Ä {complaint_data['‡§µ‡§ø‡§≠‡§æ‡§ó']} ‡§∏‡•á ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§è‡§ó‡§æ‡•§ 
    ‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶!"""
    
    complaint_data["‡§¨‡•ã‡§≤‡§®‡•á_‡§≤‡§æ‡§Ø‡§ï_‡§∏‡§æ‡§∞‡§æ‡§Ç‡§∂"] = summary
    complaint_data["‡§Ö‡§Ç‡§§‡§ø‡§Æ_‡§ò‡•ã‡§∑‡§£‡§æ"] = final_message
    
    # Speak summary and final message
    # speak_hindi(summary)
    # time.sleep(1)
    speak_hindi(final_message)
    
    # Print and save with description
    print("‚úÖ ‡§Ö‡§Ç‡§§‡§ø‡§Æ ‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§:")
    print(json.dumps(complaint_data, indent=2, ensure_ascii=False))
    
    try:
        with open("complaints.json", "a", encoding="utf-8") as f:
            f.write(json.dumps(complaint_data, ensure_ascii=False) + "\n")
    except Exception as e:
        print(f"File save error: {e}")
    
    # Send to backend and Telegram
    send_to_backend(complaint_data)
    # send_telegram_message(complaint_data, complaint_data.get("complaint_id", "CMP-UNKNOWN"))
    
    return complaint_data


if __name__ == "__main__":
    start_conversation()